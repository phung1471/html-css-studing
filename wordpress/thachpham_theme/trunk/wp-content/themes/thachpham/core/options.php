<?php
if ( ! class_exists( 'ThachPham_Theme_Options' ) ) {

    /* class ThachPham_Theme_Options s·∫Ω ch·ª©a to√†n b·ªô code t·∫°o options trong theme t·ª´ Redux Framework */
    class ThachPham_Theme_Options {
        /* T√°i t·∫°o c√°c bi·∫øn c√≥ trong Redux Framework */
        public $args = array();
        public $sections = array();
        public $theme;
        public $ReduxFramework;

        /* Load Redux Framework */
        public function __construct() {

            if ( ! class_exists( 'ReduxFramework' ) ) {
                return;
            }

            // This is needed. Bah WordPress bugs.  <img draggable="false" class="emoji" alt="üòâ" src="https://s.w.org/images/core/emoji/2.2.1/svg/1f609.svg">
            if ( true == Redux_Helpers::isTheme( __FILE__ ) ) {
                $this->initSettings();
            } else {
                add_action( 'plugins_loaded', array( $this, 'initSettings' ), 10 );
            }

        }

        /**
        Thi·∫øt l·∫≠p c√°c method mu·ªën s·ª≠ d·ª•ng
        Method n√†o ƒë∆∞·ª£c khai b√°o trong n√†y th√¨ c≈©ng ph·∫£i ƒë∆∞·ª£c s·ª≠ d·ª•ng
         **/
        public function initSettings() {

            // Set the default arguments
            $this->setArguments();

            // Set a few help tabs so you can see how it's done
            $this->setHelpTabs();

            // Create the sections and fields
            $this->setSections();

            if ( ! isset( $this->args['opt_name'] ) ) { // No errors please
                return;
            }

            $this->ReduxFramework = new ReduxFramework( $this->sections, $this->args );
        }

        /**
        Thi·∫øt l·∫≠p cho method setAgruments
        Method n√†y s·∫Ω ch·ª©a c√°c thi·∫øt l·∫≠p c∆° b·∫£n cho trang Options Framework nh∆∞ t√™n menu ch·∫≥ng h·∫°n
         **/
        public function setArguments()
        {
            $theme = wp_get_theme(); // L∆∞u c√°c ƒë·ªëi t∆∞·ª£ng tr·∫£ v·ªÅ b·ªüi h√†m wp_get_theme() v√†o bi·∫øn $theme ƒë·ªÉ l√†m m·ªôt s·ªë vi·ªác t√πy th√≠ch.
            $this->args = array(
                // C√°c thi·∫øt l·∫≠p cho trang Options
                'opt_name' => 'tp_options', // T√™n bi·∫øn tr·∫£ d·ªØ li·ªáu c·ªßa t·ª´ng options, v√≠ d·ª•: tp_options['field_1']
                'display_name' => $theme->get('Name'), // Thi·∫øt l·∫≠p t√™n theme hi·ªÉn th·ªã trong Theme Options
                'menu_type' => 'menu',
                'allow_sub_menu' => true,
                'menu_title' => __('TP Theme Options', 'thachpham'),
                'page_title' => __('TP Theme Options', 'thachpham'),
                'dev_mode' => false,
                'customizer' => true,
                'google_api_key' => 'AIzaSyAs0iVWrG4E_1bG244-z4HRKJSkg7JVrVQ',
                'menu_icon' => '', // ƒê∆∞·ªùng d·∫´n icon c·ªßa menu option
                // Ch·ª©c nƒÉng Hint t·∫°o d·∫•u ch·∫•m h·ªèi ·ªü m·ªói option ƒë·ªÉ h∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng */
                'hints' => array(
                    'icon' => 'icon-question-sign',
                    'icon_position' => 'right',
                    'icon_color' => 'lightgray',
                    'icon_size' => 'normal',
                    'tip_style' => array(
                        'color' => 'light',
                        'shadow' => true,
                        'rounded' => false,
                        'style' => '',
                    ),
                    'tip_position' => array(
                        'my' => 'top left',
                        'at' => 'bottom right',
                    ),
                    'tip_effect' => array(
                        'show' => array(
                            'effect' => 'slide',
                            'duration' => '500',
                            'event' => 'mouseover',
                        ),
                        'hide' => array(
                            'effect' => 'slide',
                            'duration' => '500',
                            'event' => 'click mouseleave',
                        ),
                    ),
                ) // end Hints
            );
        }

        /**
        Thi·∫øt l·∫≠p khu v·ª±c Help ƒë·ªÉ h∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng
         **/
        public function setHelpTabs() {

            // Custom page help tabs, displayed using the help API. Tabs are shown in order of definition.
            $this->args['help_tabs'][] = array(
                'id'      => 'redux-help-tab-1',
                'title'   => __( 'Theme Information 1', 'thachpham' ),
                'content' => __( '<p>This is the tab content, HTML is allowed.</p>', 'thachpham' )
            );

            $this->args['help_tabs'][] = array(
                'id'      => 'redux-help-tab-2',
                'title'   => __( 'Theme Information 2', 'thachpham' ),
                'content' => __( '<p>This is the tab content, HTML is allowed.</p>', 'thachpham' )
            );

            // Set the help sidebar
            $this->args['help_sidebar'] = __( '<p>This is the sidebar content, HTML is allowed.</p>', 'thachpham' );
        }

        /**
        Thi·∫øt l·∫≠p t·ª´ng ph·∫ßn trong khu v·ª±c Theme Options
        m·ªói section ƒë∆∞·ª£c xem nh∆∞ l√† m·ªôt ph√¢n v√πng c√°c t√πy ch·ªçn
        Trong m·ªói section c√≥ th·ªÉ s·∫Ω ch·ª©a nhi·ªÅu field
         **/
        public function setSections() {

            // Home Section
            $this->sections[] = array(
                'title'  => __( 'Header', 'thachpham' ),
                'desc'   => __( 'All of settings for header on this theme.', 'thachpham' ),
                'icon'   => 'el-icon-home',
                'fields' => array(// M·ªói array l√† m·ªôt field
                    array(
                        'id'       => 'logo-on',
                        'type'     => 'switch',
                        'title'    => __( 'Enable Image Logo', 'thachpham' ),
                        'compiler' => 'bool', // Tr·∫£ v·ªÅ gi√° tr·ªã ki·ªÉu true/false (boolean)
                        'desc'     => __( 'Do you want to use image as a logo?', 'thachpham' ),
                        'on' => __( 'Enabled', 'thachpham' ),
                        'off' => __('Disabled')
                    ),

                    array(
                        'id'       => 'logo-image',
                        'type'     => 'media',
                        'title'    => __( 'Logo Image', 'thachpham' ),
                        'desc'     => __( 'Image that you want to use as logo', 'thachpham' ),
                    ),
                )
            ); // end section

            // Typography Section
            $this->sections[] = array(
                'title' => __( 'Typography', 'thachpham' ),
                'desc' => __( 'All of settings for themes typography', 'thachpham' ),
                'icon' => 'el-icon-font',
                'fields' => array(
                    // Main typography
                    array(
                        'id' => 'typo-main',
                        'type' => 'typography',
                        'title' => 'Main Typography',
                        'output' => array( 'body' ),
                        'text-transform' => true,
                        'default' => array(
                            'font-size' => '14px',
                            'font-family' => 'Helvetica Neue, Arial, sans-serif',
                            'font-color' => '#333333',
                        ),
                    ),
                )
            ); // end section

        }
    }

    /* K√≠ch ho·∫°t class ThachPham_Theme_Options v√†o Redux Framework */
    global $reduxConfig;
    $reduxConfig = new ThachPham_Theme_Options();
}